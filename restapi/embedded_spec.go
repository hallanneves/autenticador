// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Essa API foi desenvolvida para gerenciar o servico de autenticacao de usuario em um microserviço genérico.\n É necesário um tokem de acesso para a aplicação acessar a API de autenticação. Pode ser removido mediante analise do projeto.",
    "title": "Autenticador",
    "version": "1.0"
  },
  "basePath": "/v1",
  "paths": {
    "/auth": {
      "post": {
        "description": "O sistema valida os usuários e senha fazendo cache de dados do usuário por 10 segundos. Em caso de troca de senha é necesário aguardar esse tempo para realizar novas tentativas.\n Requisições do mesmo IP ou usuário com a senha errada 5 vezes entrão na fila de bloqueio e permanecem lá por 3 min. *Podendomos futuramente colocar o IP do cliente no FireWall do SO.*\n O sistema de autenticação tem como restrição senhas de no mínimo 6 caracteres e no máximo 200.\n As autenticação tem como resposta OK, 200, ou erro de autenticação.\n",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Valida um usuário e senha",
        "operationId": "validaCredenciais",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credenciais"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200, Success"
          },
          "401": {
            "description": "Status 401, StatusUnauthorized"
          },
          "500": {
            "description": "Status 500, StatusInternalServerError",
            "schema": {
              "$ref": "#/definitions/Erro"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Credenciais": {
      "type": "object",
      "required": [
        "usuario",
        "senha"
      ],
      "properties": {
        "senha": {
          "description": "Senha de acesso",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "usuario": {
          "description": "Username, email ou código do usuário",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "Erro": {
      "type": "object",
      "properties": {
        "Mensagem": {
          "type": "string"
        }
      }
    },
    "Token": {
      "type": "string",
      "minLength": 1
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "security": [
    {
      "api_key": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Essa API foi desenvolvida para gerenciar o servico de autenticacao de usuario em um microserviço genérico.\n É necesário um tokem de acesso para a aplicação acessar a API de autenticação. Pode ser removido mediante analise do projeto.",
    "title": "Autenticador",
    "version": "1.0"
  },
  "basePath": "/v1",
  "paths": {
    "/auth": {
      "post": {
        "description": "O sistema valida os usuários e senha fazendo cache de dados do usuário por 10 segundos. Em caso de troca de senha é necesário aguardar esse tempo para realizar novas tentativas.\n Requisições do mesmo IP ou usuário com a senha errada 5 vezes entrão na fila de bloqueio e permanecem lá por 3 min. *Podendomos futuramente colocar o IP do cliente no FireWall do SO.*\n O sistema de autenticação tem como restrição senhas de no mínimo 6 caracteres e no máximo 200.\n As autenticação tem como resposta OK, 200, ou erro de autenticação.\n",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Valida um usuário e senha",
        "operationId": "validaCredenciais",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credenciais"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200, Success"
          },
          "401": {
            "description": "Status 401, StatusUnauthorized"
          },
          "500": {
            "description": "Status 500, StatusInternalServerError",
            "schema": {
              "$ref": "#/definitions/Erro"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Credenciais": {
      "type": "object",
      "required": [
        "usuario",
        "senha"
      ],
      "properties": {
        "senha": {
          "description": "Senha de acesso",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "usuario": {
          "description": "Username, email ou código do usuário",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "Erro": {
      "type": "object",
      "properties": {
        "Mensagem": {
          "type": "string"
        }
      }
    },
    "Token": {
      "type": "string",
      "minLength": 1
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "security": [
    {
      "api_key": []
    }
  ]
}`))
}
