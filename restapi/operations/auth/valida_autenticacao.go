// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	models "github.com/hallanneves/autenticador/models"
)

// ValidaAutenticacaoHandlerFunc turns a function with the right signature into a valida autenticacao handler
type ValidaAutenticacaoHandlerFunc func(ValidaAutenticacaoParams, *models.Token) middleware.Responder

// Handle executing the request and returning a response
func (fn ValidaAutenticacaoHandlerFunc) Handle(params ValidaAutenticacaoParams, principal *models.Token) middleware.Responder {
	return fn(params, principal)
}

// ValidaAutenticacaoHandler interface for that can handle valid valida autenticacao params
type ValidaAutenticacaoHandler interface {
	Handle(ValidaAutenticacaoParams, *models.Token) middleware.Responder
}

// NewValidaAutenticacao creates a new http.Handler for the valida autenticacao operation
func NewValidaAutenticacao(ctx *middleware.Context, handler ValidaAutenticacaoHandler) *ValidaAutenticacao {
	return &ValidaAutenticacao{Context: ctx, Handler: handler}
}

/*ValidaAutenticacao swagger:route POST /auth auth validaAutenticacao

Valida um usuário e senha

O sistema valida os usuários e senha fazendo cache de dados do usuário por 10 segundos. Em caso de troca de senha é necesário aguardar esse tempo para realizar novas tentativas.
 Requisições do mesmo IP ou usuário com a senha errada 5 vezes entrão na fila de bloqueio e permanecem lá por 3 min. *Podendomos futuramente colocar o IP do cliente no FireWall do SO.*
 O sistema de autenticação tem como restrição senhas de no mínimo 6 caracteres e no máximo 200.
 As autenticação tem como resposta OK, 200, ou erro de autenticação.


*/
type ValidaAutenticacao struct {
	Context *middleware.Context
	Handler ValidaAutenticacaoHandler
}

func (o *ValidaAutenticacao) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewValidaAutenticacaoParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Token
	if uprinc != nil {
		principal = uprinc.(*models.Token) // this is really a models.Token, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
